pull())
) -
rowSums(dfS[,-1])
((dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull()) +
(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
pull())
-
rowSums(dfS[,-1])
)
((dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull()) +
(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
pull())
)
((dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull()) +
(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
pull())
) -
rowSums(dfS[,-1])
((dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull()) +
(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
pull())
) -
rowSums(dfS[,-1])
dfS
((dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull()) +
(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
pull())
)
View(dfS)
(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n()) %>%
pull())
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n())
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n())
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n = n())
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n = n()) %>%
dplyr::rename(Team1 = Team2)
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2))
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
mutate(n = n1 + n2)
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
mutate(n = n1 + n2) %>%
pull(n)
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
replace(is.na(.), 0) %>%
mutate(n = n1 + n2) %>%
pull(n)
rowSums(dfS[,-1])
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
replace(is.na(.), 0) %>%
mutate(n = n1 + n2)
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
replace(is.na(.), 0) %>%
mutate(n = n1 + n2) %>%
arrange(Team1)
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
replace(is.na(.), 0) %>%
mutate(n = n1 + n2) %>%
arrange(Team1) %>%
pull(n)
rowSums(dfS[,-1])
full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)
colSums(dfS[,-1])
(full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)) - colSums(dfS[,-1])
install.packages("statnet")
library(statnet)
judging = as.network(x = dfS,
directed = TRUE,
loops = FALSE,
matrix.type = "adjacancy")
judging = as.network(x = dfS,
directed = TRUE,
loops = FALSE,
matrix.type = "adjacency")
dfS
judging = as.network(x = dfS[,-1],
directed = TRUE,
loops = FALSE,
matrix.type = "adjacency")
dfS[,-1]
dfS = bind_rows(dfComparison %>%
filter(Team1Better == FALSE) %>% # select the FALSE rows
mutate(Team1S = Team2,           # switch team identity
Team2S = Team1),
dfComparison %>% filter(Team1Better == TRUE) %>%
mutate(Team1S = Team1,
Team2S = Team2)) %>%     # bind it w/ the TRUE rows
group_by(Team1S, Team2S) %>%                    # create unique pairs
summarise(TotalBetter = n()) %>%                # count the total number
spread(Team2S, TotalBetter) %>%                 # create the wide format
replace(is.na(.), 0)                            # clean up
dfS
names(dfS)
cbind(names(dfS), dfS$Team1S)
cbind(names(dfS[,-1]), dfS$Team1S)
"%w/o%" <- function(x, y) x[!x %in% y] #--  x without y
names(dfS[,-1]) %w/o% dfS$Team1S
dfS$Team1S %w/o% names(dfS[,-1])
dfComparison %>% select(Team1, Team2)
dfComparison %>% select(Team1, Team2) %>%
unlist()
dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique() %>%
arrange()
dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique() %>%
order()
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique() %>%
dfS = bind_rows(dfComparison %>%
filter(Team1Better == FALSE) %>% # select the FALSE rows
mutate(Team1S = Team2,           # switch team identity
Team2S = Team1),
dfComparison %>% filter(Team1Better == TRUE) %>%
mutate(Team1S = Team1,
Team2S = Team2)) %>%     # bind it w/ the TRUE rows
group_by(Team1S, Team2S) %>%                    # create unique pairs
summarise(TotalBetter = n()) %>%                # count the total number
spread(Team2S, TotalBetter) %>%                 # create the wide format
replace(is.na(.), 0)                            # clean up
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes
vcNodes = vcNodes[order(vcNodes)]
vcNodes
dfS = array(0, dim = c(length(vcNodes), length(vcNodes), nrow(dfComparison)))
dfS
apply(dfS, c(1,2), sum)
vcNodes
vcNodes = data_frame(vcNodes, 1:length(vcNodes))
vcNodes
vcNodes = dfComparison %>% select(Team1, Team2) %>%
unlist() %>%
unique()
vcNodes = vcNodes[order(vcNodes)]
vcNodes = data_frame(vcNodes, number = 1:length(vcNodes))
vcNodes
left_join(dfComparison$Team1, vcNodes, by = c("Team1" = "vcNodes"))
dfComparison$Team1
dfComparison
dfComparison %>% select(Team1)
dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))
dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes"))
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes"))))
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
View()
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
dfS = array(0, dim = c(length(vcNodes), length(vcNodes), nrow(dfComparison)))
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes"))))
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team1Better)
bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team1Better) %>%
rename(Team1Number = number,
Team2Number = number1)
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team1Better) %>%
rename(Team1Number = number,
Team2Number = number1)
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team1Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison))
dfComparisonNumber
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
dfS
1:nrow(vcNodes)
dfComparisonNumber
## Step 4: fill empty matrix the smart way
lapply(1:nrow(vcNodes), function(x){
if(x[3] == TRUE) dfS[x[1], x[2], x[4]] = 1
else dfS[x[2], x[1], x[4]] = 1
})
1:nrow(vcNodes)
## Step 4: fill empty matrix the smart way
lapply(1:nrow(vcNodes), function(x){
if(x[3] == TRUE){ dfS[x[1], x[2], x[4]] = 1}
else {dfS[x[2], x[1], x[4]] = 1}
})
## Step 4: fill empty matrix the smart way
lapply(1:nrow(vcNodes), function(x){
if (x[3] == TRUE){
dfS[x[1], x[2], x[4]] = 1
} else {
dfS[x[2], x[1], x[4]] = 1
}
})
x
## Step 4: fill empty matrix the smart way
for (i in 1:nrow(vcNodes) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
})
## Step 4: fill empty matrix the smart way
for (i in 1:nrow(vcNodes)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
dfComparisonNumber
## Step 2: replace team names w/ numbers
dfComparisonNumber =  bind_cols(dfComparison,
(dfComparison %>% select(Team1) %>%
left_join(vcNodes, by = c("Team1" = "vcNodes"))),
(dfComparison %>% select(Team2) %>%
left_join(vcNodes, by = c("Team2" = "vcNodes")))) %>%
select(number, number1, Team1Better) %>%
rename(Team1Number = number,
Team2Number = number1) %>%
mutate(row = 1:nrow(dfComparison)) %>%
as.data.frame()
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty matrix the smart way
for (i in 1:nrow(vcNodes)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 4: fill empty array the smart way
for (i in 1:nrow(vcNodes)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
} %>%
apply(c(1,2), sum)
apply(dfS, c(1,2), sum)
apply(dfS, c(1,2), sum) %>% rowSums() %>% sum()
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(vcNodes)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
apply(dfS, c(1,2), sum) %>% rowSums() %>% sum()
dfS = apply(dfS, c(1,2), sum)
## Step 3: create empty matrix
dfS = array(0, dim = c(nrow(vcNodes), nrow(vcNodes), nrow(dfComparison)))
## Step 4: fill empty array the smart way
for (i in 1:nrow(dfComparisonNumber)) {
if (dfComparisonNumber[i,3] == TRUE){
dfS[dfComparisonNumber[i,1], dfComparisonNumber[i,2], dfComparisonNumber[i,4]] = 1
} else {
dfS[dfComparisonNumber[i,2], dfComparisonNumber[i,1], dfComparisonNumber[i,4]] = 1
}
}
## Step 5: compute the sum of all the comparisons per team
dfS = apply(dfS, c(1,2), sum)
dfS
full_join(dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)
rowSums(dfS)
(full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)) - colSums(dfS[,-1])
(full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n)) - colSums(dfS)
View(dfS)
colSums(dfS)
(full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n))
(full_join(dfComparison %>% filter(Team1Better == FALSE) %>%
group_by(Team1) %>%
summarise(n1 = n()),
dfComparison %>% filter(Team1Better == TRUE) %>%
group_by(Team2) %>%
summarise(n2 = n()) %>%
dplyr::rename(Team1 = Team2)) %>%
# necessary for the full_join
replace(is.na(.), 0) %>%
# necessary for computing the total sum
mutate(n = n1 + n2) %>%
# necessary to get the same order as the dfS
arrange(Team1) %>%
pull(n))
colSums(dfS)
judging = as.network(x = dfS,
directed = TRUE,
loops = FALSE,
matrix.type = "adjacency")
plot.network(judging)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
lsof -wni tcp:3000
lsof
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
